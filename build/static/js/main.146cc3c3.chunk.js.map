{"version":3,"sources":["components/Timer/Timer.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Timer","useState","min","setMin","sec","setSec","msec","setMsec","isActive","setIsActive","isPaused","setIsPaused","interval","useRef","handleStart","current","setInterval","minLength","toString","length","secLength","msecLength","className","onClick","clearInterval","disabled","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAqEeA,EAjED,WACV,MAAoBC,mBAAS,GAA7B,mBAAKC,EAAL,KAAUC,EAAV,KACA,EAAoBF,mBAAS,GAA7B,mBAAKG,EAAL,KAAUC,EAAV,KACA,EAAsBJ,mBAAS,GAA/B,mBAAKK,EAAL,KAAWC,EAAX,KACA,EAAgCN,oBAAS,GAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAAgCR,oBAAS,GAAzC,mBAAOS,EAAP,KAAiBC,EAAjB,KACIC,EAAgBC,iBAAO,MAErBC,EAAc,WAChBL,GAAY,GACZE,GAAY,GACZC,EAASG,QAAUC,aAAY,WAC3BT,IAAUD,GACNA,GAAQ,KACRD,IAASD,GACTE,EAAO,GAEFF,GAAO,KACZD,IAASD,GACTE,EAAM,KAEX,KAELa,EAAYf,EAAIgB,WAAWC,OAC3BC,EAAYhB,EAAIc,WAAWC,OAC3BE,EAAaf,EAAKY,WAAWC,OAiB/B,OACI,sBAAKG,UAAU,kBAAf,UACI,2CACA,iCAAOL,EAAY,EAAZ,WAAoBf,GAAOA,EAAlC,gBACA,iCAAOkB,EAAY,EAAZ,WAAoBhB,GAAOA,EAAlC,gBACA,+BAAOiB,EAAa,EAAb,WAAqBf,GAAQA,IAAY,uBAChD,sBAAKgB,UAAU,UAAf,UAESZ,GAAaF,EAGVE,EACI,wBAAQa,QA3BZ,WAChBC,cAAcZ,EAASG,SACvBJ,GAAY,IAyBQ,mBAEA,wBAAQY,QAzBX,WACjBT,KAwBoB,oBALJ,wBAAQS,QAAST,EAAjB,mBAQR,wBAAQS,QAzBA,WAChBC,cAAcZ,EAASG,SACvBN,GAAY,GACZF,EAAQ,GACRF,EAAO,GACPF,EAAO,IAoB+BsB,UAAWjB,EAAzC,0B,MCnDDkB,MARf,WACI,OACI,qBAAKJ,UAAU,YAAf,SACI,cAAC,EAAD,OCOGK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.146cc3c3.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport './timer.css'\r\n\r\n\r\nconst Timer = () => {\r\n    let [min, setMin] = useState(0)\r\n    let [sec, setSec] = useState(0)\r\n    let [msec, setMsec] = useState(0)\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [isPaused, setIsPaused] = useState(false);\r\n    let interval: any = useRef(null)\r\n\r\n    const handleStart = () => {\r\n        setIsActive(true)\r\n        setIsPaused(true)\r\n        interval.current = setInterval(() => {\r\n            setMsec(++msec);\r\n            if (msec >= 100) {\r\n                setSec(++sec);\r\n                msec = 0\r\n            }\r\n            else if (sec >= 60) {\r\n                setMin(++min)\r\n                sec = 0;\r\n            }\r\n        }, 10)\r\n    }\r\nconst minLength = min.toString().length\r\nconst secLength = sec.toString().length\r\nconst msecLength = msec.toString().length\r\n\r\n    const handlePause = () => {\r\n        clearInterval(interval.current)\r\n        setIsPaused(false)\r\n    }\r\n    const handleResume = () => {\r\n        handleStart()\r\n    }\r\n    const handleReset = () => {\r\n        clearInterval(interval.current)\r\n        setIsActive(false)\r\n        setMsec(0)\r\n        setSec(0)\r\n        setMin(0)\r\n\r\n    }\r\n    return (\r\n        <div className=\"timer-container\">\r\n            <h1>Timer App</h1>\r\n            <span>{minLength < 2 ? `0${min}` :min} &nbsp;:&nbsp;</span>\r\n            <span>{secLength < 2 ? `0${sec}` :sec} &nbsp;:&nbsp;</span>\r\n            <span>{msecLength < 2 ? `0${msec}` :msec}</span><br />\r\n            <div className=\"buttons\">\r\n                {\r\n                    !isPaused && !isActive ?\r\n                        <button onClick={handleStart}>start</button>\r\n                        :\r\n                        isPaused ?\r\n                            <button onClick={handlePause}>pause</button>\r\n                            :\r\n                            <button onClick={handleResume}>Resume</button>\r\n\r\n                }\r\n                <button onClick={handleReset} disabled={!isActive}>Reset</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Timer;\r\n","import React from 'react'\r\nimport Timer from '../Timer/Timer'\r\nimport './App.css'\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"container\">\r\n            <Timer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}